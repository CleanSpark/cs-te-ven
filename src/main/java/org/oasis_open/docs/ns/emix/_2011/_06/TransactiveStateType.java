//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.02.05 at 11:06:51 AM PST 
//


package org.oasis_open.docs.ns.emix._2011._06;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for TransactiveStateType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="TransactiveStateType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="indicationOfInterest"/>
 *     &lt;enumeration value="tender"/>
 *     &lt;enumeration value="transaction"/>
 *     &lt;enumeration value="exercise"/>
 *     &lt;enumeration value="delivery"/>
 *     &lt;enumeration value="transportCommitment"/>
 *     &lt;enumeration value="publication"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "TransactiveStateType")
@XmlEnum
public enum TransactiveStateType {

    @XmlEnumValue("indicationOfInterest")
    INDICATION_OF_INTEREST("indicationOfInterest"),
    @XmlEnumValue("tender")
    TENDER("tender"),
    @XmlEnumValue("transaction")
    TRANSACTION("transaction"),
    @XmlEnumValue("exercise")
    EXERCISE("exercise"),
    @XmlEnumValue("delivery")
    DELIVERY("delivery"),
    @XmlEnumValue("transportCommitment")
    TRANSPORT_COMMITMENT("transportCommitment"),
    @XmlEnumValue("publication")
    PUBLICATION("publication");
    private final String value;

    TransactiveStateType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TransactiveStateType fromValue(String v) {
        for (TransactiveStateType c: TransactiveStateType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
